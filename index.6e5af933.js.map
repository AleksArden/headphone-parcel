{"mappings":"YAQA,GAAsB,oBAAXA,OAAwB,CACjC,IAAIC,EAAqB,CACnBC,eACiB,C,GAIvBF,OAAOG,iBAAiB,cAAe,KAAMF,GAC7CD,OAAOI,oBAAoB,cAAe,KAAMH,E,CAGlD,IChBQI,EACAC,EACAC,EACAC,EDa4B,oBAAXR,QAA0BA,OAAOS,WAAaT,OAAOS,UAAUC,WAAa,iBAAiBC,KAAKX,OAAOS,UAAUC,WAA2C,aAA9BV,OAAOS,UAAUC,UAA2BV,OAAOS,UAAUG,gBChB9MP,EAAaQ,SAASC,cAAc,sBACpCR,EAAcO,SAASC,cAAc,iBACrCP,EAAeM,SAASC,cAAc,kBACtCN,EAAa,WACjB,IAAMO,EAC0C,SAA9CT,EAAYU,aAAa,mBAA+B,EAC1DV,EAAYW,aAAa,iBAAkBF,GAC3CV,EAAWa,UAAUC,OAAO,WAI5BC,eAH0BL,EAEtB,mBADA,qBAE6BF,SAASQ,K,EAE5Cf,EAAYH,iBAAiB,QAASK,GACtCD,EAAaJ,iBAAiB,QAASK,GAKvCR,OAAOsB,WAAW,uBAAuBnB,iBAAiB,UAAU,SAAAoB,GAC7DA,EAAEC,UACPnB,EAAWa,UAAUO,OAAO,WAC5BnB,EAAYW,aAAa,iBAAiB,GAC1CG,eAAeM,iBAAiBb,SAASQ,M,IC1B7C,IAAIM,EAAS,SAAAC,G,OAAKf,SAASC,cAAcc,E,EAEzCD,EAAO,wBAAwBxB,iBAAiB,SAEhD,SAAiB0B,GACb,GAA4B,WAAxBA,EAAIC,OAAOC,SAAuB,OACtC,IAAMC,EAAYH,EAAIC,OAAOG,QAAQC,OAErCP,EAAO,yBAAyBT,UAAUO,OAAO,0BACjDE,EAAO,yBAAyBT,UAAUO,OAAO,0BACjDE,EAAO,yBAAyBT,UAAUO,OAAO,0BACjDE,EAAO,oBAA8BQ,OAAVH,EAAU,OAAKd,UAAUkB,IAAI,0BAExDT,EAAO,4BAA4BT,UAAUO,OAAO,0BACpDE,EAAO,4BAA4BT,UAAUO,OAAO,0BACpDE,EAAO,4BAA4BT,UAAUO,OAAO,0BACpDE,EAAO,uBAAiCQ,OAAVH,EAAU,OAAKd,UAAUkB,IAAI,yB,IChB/D,IAAAC,EAAeC,QAAU,CACrB,CACIC,OAAQ,IACRC,KAAM,miBAEV,CACID,OAAQ,IACRC,KAAM,8WAEV,CACID,OAAQ,IACRC,KAAM,0iBAEV,CACID,OAAQ,IACRC,KAAM,0OCbVC,EAAS,SAAAb,G,OAAKf,SAASC,cAAcc,E,EAEzCa,EAAO,oBAAoBtC,iBAAiB,SAE5C,SAAiBoB,GACb,GAA0B,QAAtBA,EAAEO,OAAOC,SAAoB,OACjC,IAAMC,EAAYT,EAAEO,OAAOG,QAAQC,OACVQ,EAAAL,EAAQ,GAAaF,OAAVH,IAA5BO,EAAiBG,EAAjBH,OAAQC,EAASE,EAATF,KAEhB,GAA8C,OAA1CC,EAAO,gBAA0BN,OAAVH,EAAU,OAEjC,YAWR,SAAuBO,GACnBE,EAAO,gBAAuBN,OAAPI,EAAO,OAAKd,Q,CAb/BkB,CAAcJ,IAKtB,SAAuBA,EAAQC,GAC3B,IAAMI,EAAI/B,SAASgC,cAAc,KACjCD,EAAE3B,aAAa,YAAa,GAAUkB,OAAPI,IAC/BK,EAAEE,YAAc,GAAQX,OAALK,GACnBI,EAAEG,MAAMC,UAAY,OACbP,EAAO,oBAA2BN,OAAPI,EAAO,OAAKU,OAAOL,E,CAPrDM,CAAcX,EAAQC,E","sources":["node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js","src/js/mobile-menu.js","src/js/review.js","src/js/answers.js","src/js/questions.js"],"sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// Older browsers don't support event options, feature detect it.\n\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\nvar hasPassiveEvents = false;\nif (typeof window !== 'undefined') {\n  var passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\n\n\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPosition = void 0;\nvar previousBodyPaddingRight = void 0;\n\n// returns true if `el` should be allowed to receive touchmove events.\nvar allowTouchMove = function allowTouchMove(el) {\n  return locks.some(function (lock) {\n    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar preventDefault = function preventDefault(rawEvent) {\n  var e = rawEvent || window.event;\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true;\n  }\n\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n\n  if (e.preventDefault) e.preventDefault();\n\n  return false;\n};\n\nvar setOverflowHidden = function setOverflowHidden(options) {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n    var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n    if (_reserveScrollBarGap && scrollBarGap > 0) {\n      var computedBodyPaddingRight = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'), 10);\n      previousBodyPaddingRight = document.body.style.paddingRight;\n      document.body.style.paddingRight = computedBodyPaddingRight + scrollBarGap + 'px';\n    }\n  }\n\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n  }\n};\n\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight;\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined;\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting;\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined;\n  }\n};\n\nvar setPositionFixed = function setPositionFixed() {\n  return window.requestAnimationFrame(function () {\n    // If previousBodyPosition is already set, don't set it again.\n    if (previousBodyPosition === undefined) {\n      previousBodyPosition = {\n        position: document.body.style.position,\n        top: document.body.style.top,\n        left: document.body.style.left\n      };\n\n      // Update the dom inside an animation frame \n      var _window = window,\n          scrollY = _window.scrollY,\n          scrollX = _window.scrollX,\n          innerHeight = _window.innerHeight;\n\n      document.body.style.position = 'fixed';\n      document.body.style.top = -scrollY;\n      document.body.style.left = -scrollX;\n\n      setTimeout(function () {\n        return window.requestAnimationFrame(function () {\n          // Attempt to check if the bottom bar appeared due to the position change\n          var bottomBarHeight = innerHeight - window.innerHeight;\n          if (bottomBarHeight && scrollY >= innerHeight) {\n            // Move the content further up so that the bottom bar doesn't hide it\n            document.body.style.top = -(scrollY + bottomBarHeight);\n          }\n        });\n      }, 300);\n    }\n  });\n};\n\nvar restorePositionSetting = function restorePositionSetting() {\n  if (previousBodyPosition !== undefined) {\n    // Convert the position from \"px\" to Int\n    var y = -parseInt(document.body.style.top, 10);\n    var x = -parseInt(document.body.style.left, 10);\n\n    // Restore styles\n    document.body.style.position = previousBodyPosition.position;\n    document.body.style.top = previousBodyPosition.top;\n    document.body.style.left = previousBodyPosition.left;\n\n    // Restore scroll\n    window.scrollTo(x, y);\n\n    previousBodyPosition = undefined;\n  }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\n\nvar handleScroll = function handleScroll(event, targetElement) {\n  var clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport var disableBodyScroll = function disableBodyScroll(targetElement, options) {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n    return;\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(function (lock) {\n    return lock.targetElement === targetElement;\n  })) {\n    return;\n  }\n\n  var lock = {\n    targetElement: targetElement,\n    options: options || {}\n  };\n\n  locks = [].concat(_toConsumableArray(locks), [lock]);\n\n  if (isIosDevice) {\n    setPositionFixed();\n  } else {\n    setOverflowHidden(options);\n  }\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY;\n      }\n    };\n    targetElement.ontouchmove = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement);\n      }\n    };\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = true;\n    }\n  }\n};\n\nexport var clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(function (lock) {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n\n    // Reset initial clientY.\n    initialClientY = -1;\n  }\n\n  if (isIosDevice) {\n    restorePositionSetting();\n  } else {\n    restoreOverflowSetting();\n  }\n\n  locks = [];\n};\n\nexport var enableBodyScroll = function enableBodyScroll(targetElement) {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n    return;\n  }\n\n  locks = locks.filter(function (lock) {\n    return lock.targetElement !== targetElement;\n  });\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n  }\n\n  if (isIosDevice) {\n    restorePositionSetting();\n  } else {\n    restoreOverflowSetting();\n  }\n};\n\n","import { disableBodyScroll, enableBodyScroll, clearAllBodyScrollLocks } from 'body-scroll-lock';\n\n(() => {\n  const mobileMenu = document.querySelector('.js-menu-container');\n  const openMenuBtn = document.querySelector('.js-open-menu');\n  const closeMenuBtn = document.querySelector('.js-close-menu');\n  const toggleMenu = () => {\n    const isMenuOpen =\n      openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n    openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n    mobileMenu.classList.toggle('is-open');\n    const scrollLockMethod = !isMenuOpen\n      ? 'disableBodyScroll'\n      : 'enableBodyScroll';\n    bodyScrollLock[scrollLockMethod](document.body);\n  };\n  openMenuBtn.addEventListener('click', toggleMenu);\n  closeMenuBtn.addEventListener('click', toggleMenu);\n\n  // Закрываем мобильное меню на более широких экранах\n  // в случае изменения ориентации устройства.\n  // Close the mobile menu on wider screens if the device orientation changes\n  window.matchMedia('(min-width: 1440px)').addEventListener('change', e => {\n    if (!e.matches) return;\n    mobileMenu.classList.remove('is-open');\n    openMenuBtn.setAttribute('aria-expanded', false);\n    bodyScrollLock.enableBodyScroll(document.body);\n  });\n})();\n","let getRef = x => document.querySelector(x);\n\ngetRef('.review__button-list').addEventListener('click', onClick)\n\nfunction onClick(evt) {\n    if (evt.target.nodeName !== 'BUTTON') return\n    const btnNumber = evt.target.dataset.action;\n\n    getRef('div[data-action=\"01\"]').classList.remove('review__active-display');\n    getRef('div[data-action=\"02\"]').classList.remove('review__active-display');\n    getRef('div[data-action=\"03\"]').classList.remove('review__active-display');\n    getRef(`div[data-action=\"${btnNumber}\"]`).classList.add('review__active-display');\n\n    getRef('button[data-action=\"01\"]').classList.remove('review__active-opacity');\n    getRef('button[data-action=\"02\"]').classList.remove('review__active-opacity');\n    getRef('button[data-action=\"03\"]').classList.remove('review__active-opacity');\n    getRef(`button[data-action=\"${btnNumber}\"]`).classList.add('review__active-opacity');\n}\n","export default answers = [\n    {\n        number: \"0\",\n        text: \"По-перше, переконайтеся, що навушники включені одним натисканням верхньої кнопки на задній стороні правого навушника. Натисніть і утримуйте кнопку живлення протягом 3x секунд, щоб перевести навушники в режим сполучення. Зверніть увагу: якщо ви вмикаєте навушники вперше, вони автоматично включаються відразу в цьому режимі сполучення. Голосові підказки нададуть вам додаткові вказівки. Ми рекомендуємо використовувати програму Bose Music для завершення сполучення, але ви також можете використовувати налаштування Bluetooth на своєму пристрої.\",\n    },\n    {\n        number: \"1\",\n        text: \"Lorem, ipsum dolor sit amet consectetur adipisicing elit. Esse voluptatum, et excepturi sit dolor placeat rem eius quos aliquid cumque dolorem odit alias repellat quae illo deleniti veritatis? Esse cupiditate ipsam commodi facilis autem, ipsum dicta maiores perferendis magni praesentium beatae architecto animi vel ullam nihil veritatis cum ratione. Perferendis\",\n    },\n    {\n        number: \"2\",\n        text: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Iure, aperiam. Laudantium ex dolores soluta incidunt odio. Perferendis autem ratione deleniti, nihil doloribus ipsam rerum aperiam quod? Expedita debitis deserunt beatae fugiat iste quam corporis iure necessitatibus, consequatur magnam sint cum ullam cumque eligendi placeat accusantium repudiandae neque corrupti porro natus exercitationem reiciendis itaque sunt ad? Consectetur, voluptate. Repudiandae explicabo dolorum quae neque autem ex, voluptas dolores atque inventore blanditiis? Fugit\",\n    },\n    {\n        number: \"3\",\n        text: \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quia deserunt quas aut tempora quo nihil adipisci aliquid laborum assumenda expedita repudiandae, voluptate repellendus eum corporis at perspiciatis voluptas hic. Impedit.\",\n    },\n\n];","import answers from './answers';\n\nlet getRef = x => document.querySelector(x);\n\ngetRef('.questions__list').addEventListener('click', onClick);\n\nfunction onClick(e) {\n    if (e.target.nodeName !== 'use') return\n    const btnNumber = e.target.dataset.action;\n    const { number, text } = answers[`${btnNumber}`];\n\n    if (getRef(`p[data-text=\"${btnNumber}\"]`) !== null) {\n        removeElement(number);\n        return;\n    }\n    createElement(number, text);\n}\nfunction createElement(number, text) {\n    const p = document.createElement('p');\n    p.setAttribute('data-text', `${number}`)\n    p.textContent = `${text}`\n    p.style.marginTop = 16 + 'px';\n    return getRef(`div[data-action=\"${number}\"]`).append(p);\n}\nfunction removeElement(number) {\n    getRef(`p[data-text=\"${number}\"]`).remove();\n}\n"],"names":["window","$bec4a57ff909e76e$var$passiveTestOptions","passive","addEventListener","removeEventListener","mobileMenu","openMenuBtn","closeMenuBtn","toggleMenu","navigator","platform","test","maxTouchPoints","document","querySelector","isMenuOpen","getAttribute","setAttribute","classList","toggle","bodyScrollLock","body","matchMedia","e","matches","remove","enableBodyScroll","$b1c3742a953d345b$var$getRef","x","evt","target","nodeName","btnNumber","dataset","action","concat","add","$7a739f835f0d13bf$export$2e2bcd8739ae039","answers","number","text","$1a1d2ee3438a6b9f$var$getRef","ref","$1a1d2ee3438a6b9f$var$removeElement","p","createElement","textContent","style","marginTop","append","$1a1d2ee3438a6b9f$var$createElement"],"version":3,"file":"index.6e5af933.js.map"}